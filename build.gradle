import java.text.SimpleDateFormat

plugins {
    id 'groovy'
    id 'java'
    id 'java-library'
    id 'maven'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'com.palantir.git-version' version '0.12.3'
}


configurations.all {
    resolutionStrategy {

        // fail eagerly on version conflict (includes transitive dependencies)
        // e.g. multiple different versions of the same dependency (group and name are equal)
        //failOnVersionConflict()
        cacheChangingModulesFor 0, 'seconds'
        // force certain versions of dependencies (including transitive)
        //  *append new forced modules:
        // force 'asm:asm-all:3.3.1', 'commons-io:commons-io:1.4'
        //  *replace existing forced modules with new ones:
        //forcedModules = ['asm:asm-all:io.gatling.highcharts:gatling-charts-highcharts']

    }

}

allprojects {
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'idea'


    group = projectGroup
    version = projectVersion


    configurations {
        compile.exclude module: 'spring-boot-starter-logging'//排除对默认logging的依赖
        compile.exclude module: 'log4j'
        all*.exclude module: 'slf4j-log4j12'
//        all*.exclude module: 'dubbo-common'
//        all*.exclude module: 'dubbo-cluster'
    }


    repositories {
        mavenLocal()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        mavenCentral()
    }


}
subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'


    dependencyManagement {
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
        }
    }


    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    dependencyManagement {
        imports {
            mavenBom "org.apache.dubbo:dubbo-bom:2.7.15"
            //放在下面，覆盖dubbo的
            mavenBom "org.springframework.boot:spring-boot-dependencies:2.2.6.RELEASE"
        }
        dependencies {
            dependency("org.apache.dubbo:dubbo-dependencies-zookeeper:2.7.15")
            dependency("org.apache.dubbo:dubbo-spring-boot-starter:2.7.15")
        }
    }


    /**
     * 需要移除mavenLocal()
     * 如果要保留mavenLocal()
     * https://stackoverflow.com/questions/12718753/how-to-download-dependency-sources-for-gradle-project-in-idea:
     * https://stackoverflow.com/questions/28404149/how-to-download-javadocs-and-sources-for-jar-using-gradle-2-0
     * 先执行gradle cleanIdea idea  去掉idea Gradle配置的offline work
     */
    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }


    jar {
        enabled = true
        manifest {
            attributes(
                    'Built-By': System.properties['user.name'],
                    'Build-Revision': gitHead(),
                    'Build-Times': new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                    'Build-Gradle-Version': "Gradle ${gradle.gradleVersion}",
                    'Build-Jdk': buildJdkVersion(),
                    'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
            )
        }
    }


    //开启增量编译
    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs += ["-Xdoclint:none", "-Xlint:none", "-nowarn", '-parameters', '-XDignore.symbol.file']
//"-Xlint:unchecked","-Werror"

        //enable incremental compilation 如果开启，会导致lombok不生效
        options.incremental = true
        //Tells whether to run the compiler in its own process. Note that this does not necessarily mean that a new process will be created for each compile task. Defaults to false.
        options.fork = true
        //options.forkOptions.executable = 'javac'
        //Tells whether to fail the build when compilation fails. Defaults to true.
        options.failOnError = true

    }

    task printRuntimeClasspath() {
        doLast {
            def fileNameList = configurations.runtimeClasspath.sort { file1, file2 ->
                return file1.name <=> file2.name
            }.collect { it.name }

            file("${project.name}-runtimeClasspath.txt").withWriter('utf-8') {
                writer ->
                    fileNameList.each { fileName ->
                        writer.writeLine fileName
                    }
            }
        }
    }

    task copyJars(type: Copy) {
        if (file('dist/').exists()) {
            println "删除dist目录"
            file('dist/').deleteDir()
        }
        from configurations.runtime
        into 'dist' // 目标位置
    }

    task deleteDist() {
        if (file('dist/').exists()) {
            println "删除dist目录"
            file('dist/').deleteDir()
        }
    }

    task mkdirs {
        doLast {
            sourceSets*.java.srcDirs*.each { it.mkdirs() }
            sourceSets*.resources.srcDirs*.each { it.mkdirs() }
        }

    }


    dependencies {
        compile enforcedPlatform("org.springframework.boot:spring-boot-dependencies:2.2.6.RELEASE")
        compile 'org.springframework.boot:spring-boot-starter'
        compile('org.springframework.boot:spring-boot')
        compileOnly('org.springframework.boot:spring-boot-configuration-processor')
        testAnnotationProcessor('org.springframework.boot:spring-boot-configuration-processor')

        compileOnly 'org.projectlombok:lombok:1.18.12'
        annotationProcessor 'org.projectlombok:lombok:1.18.12'
        testCompileOnly 'org.projectlombok:lombok:1.18.12'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'

        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
        compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.25'
        compile group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.7.25'
        compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
        compile 'junit:junit:4.13.2'

        testCompile('org.springframework.boot:spring-boot-starter-test')
        testCompile 'org.codehaus.groovy:groovy-all:2.4.12'
        testCompile "org.spockframework:spock-core:1.1-groovy-2.4"
        testCompile "org.spockframework:spock-spring:1.1-groovy-2.4"
        testCompile 'org.hamcrest:hamcrest-all:1.3'
        testCompile('com.athaydes:spock-reports:1.5.0') {
            transitive = false // this avoids affecting your version of Groovy/Spock
        }
    }

}

task checkCompatibility {
    doLast {
        assert JavaVersion.current().java8Compatible
    }
}

/**
 * gradle 5.x需要这样写
 * https://stackoverflow.com/questions/53709282/cannot-add-task-wrapper-as-a-task-with-that-name-already-exists
 */
wrapper {
    description = 'Generates gradlew[.bat] scripts'
    gradleVersion = '5.6.4'
    distributionUrl = "https://services.gradle.org/distributions/gradle-5.6.4-all.zip"
}


def static buildTime() {
    return new Date().format("yyyy-MM-dd HH:mm:ss")
}

def static gitHead() {
    try {
        return 'git rev-parse --short HEAD'.execute().text.trim()
    } catch (e) {
        return ""
    }
}

def static hostName() {
    return System.getProperty("user.name") + "@" + InetAddress.localHost.hostName
}

def static buildJdkVersion() {
    return "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})"
}


task printVersionInfo {
    try {
        println "============构建信息=========="
        def details = versionDetails()
        def cmd = 'git rev-list HEAD --first-parent --count'
        def commitUserCommand = "git log --pretty=format:%an ${details.gitHashFull} -1"
        def commitMessageCmd = "git log --pretty=format:%s ${details.gitHashFull} -1"
        def commitTimeCmd = "git log --pretty=format:%cd ${details.gitHashFull} -1"
        def gitVersion = cmd.execute().text.trim()
        if (gitVersion != null && gitVersion != '') {
            println 'git版本:' + gitVersion.toInteger()
        }
        def commitUser = commitUserCommand.execute().text.trim()
        def commitMessage = commitMessageCmd.execute().text.trim()
        def commitTime = commitTimeCmd.execute().text.trim()

        println "lastTag:${details.lastTag}"
        println "commitDistance:${details.commitDistance}"
        println "hash:${details.gitHashFull}"
        println "分支名称:${details.branchName}"// is null if the repository in detached HEAD mode
        println "isCleanTag:${details.isCleanTag}"
        println "${projectGroup}:${project.name}:${projectVersion}"
        println "构建时间:${buildTime()}"
        println "提交人:${commitUser}"
        println "提交信息:${commitMessage}"
        println "提交时间:${commitTime}"

        println "hostname:${hostName()}"
        println "Gradle版本:${gradle.gradleVersion}"
        println "JDK版本:${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})"
        println "操作系统:${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
        println "操作系统用户:${System.properties['user.name']}"
        println "============构建信息============"
    } catch (e) {
    }
}


defaultTasks 'checkCompatibility', 'printVersionInfo'

